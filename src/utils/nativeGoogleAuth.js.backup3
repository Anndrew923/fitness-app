import { auth, db } from '../firebase';
import {
  signInWithRedirect,
  getRedirectResult,
  GoogleAuthProvider,
} from 'firebase/auth';
import { doc, setDoc, getDoc } from 'firebase/firestore';

class NativeGoogleAuth {
  // 初始化 - 使用 Firebase Redirect
  static async initialize() {
    try {
      console.log('🔍 初始化 Firebase Google Auth (Redirect 模式)...');

      // 檢查是否有重定向結果
      const redirectResult = await getRedirectResult(auth);

      if (redirectResult && redirectResult.user) {
        console.log('✅ 檢測到重定向登入結果');
        await this.convertToFirebaseUser(redirectResult.user);
      }

      console.log('✅ Google Auth (Redirect) 初始化成功');
      return true;
    } catch (error) {
      console.error('❌ Google Auth 初始化失敗:', error);
      // 不拋出錯誤，允許應用繼續運行
      return false;
    }
  }

  // 執行 Google 登入 - 使用 Redirect
  static async signIn() {
    try {
      console.log('🔄 開始 Google 登入 (Redirect 模式)...');

      const provider = new GoogleAuthProvider();
      provider.setCustomParameters({
        prompt: 'select_account',
      });

      // 觸發重定向
      await signInWithRedirect(auth, provider);

      // 這行程式碼不會執行，因為頁面會重定向
      console.log('✅ Redirect 已啟動');
    } catch (error) {
      console.error('❌ Google 登入失敗:', error);
      throw error;
    }
  }

  // 處理重定向回來的結果
  static async handleRedirectResult() {
    try {
      console.log('🔄 處理重定向結果...');

      const result = await getRedirectResult(auth);

      if (result && result.user) {
        console.log('✅ 重定向登入成功:', result.user.email);

        const firebaseUser = await this.convertToFirebaseUser(result.user);
        return firebaseUser;
      }

      return null;
    } catch (error) {
      console.error('❌ 處理重定向結果失敗:', error);
      throw error;
    }
  }

  // 將 Firebase User 轉換為我們的格式
  static async convertToFirebaseUser(firebaseUser) {
    try {
      console.log('🔄 轉換 Firebase 用戶...');

      const userData = {
        uid: firebaseUser.uid,
        email: firebaseUser.email,
        displayName: firebaseUser.displayName,
        photoURL: firebaseUser.photoURL,
        emailVerified: firebaseUser.emailVerified,
        providerData: firebaseUser.providerData,
      };

      console.log('✅ Firebase 用戶資料:', userData);

      // 保存到 Firestore
      await this.saveUserToFirestore(userData);

      return userData;
    } catch (error) {
      console.error('❌ 轉換 Firebase 用戶失敗:', error);
      throw error;
    }
  }

  // 保存用戶資料到 Firestore
  static async saveUserToFirestore(userData) {
    try {
      console.log('🔄 保存用戶資料到 Firestore...');

      const userRef = doc(db, 'users', userData.uid);
      const userSnap = await getDoc(userRef);

      if (!userSnap.exists()) {
        // 新用戶
        const initialUserData = {
          email: userData.email,
          userId: userData.uid,
          nickname: userData.displayName || userData.email.split('@')[0],
          avatarUrl: userData.photoURL || '',
          createdAt: new Date().toISOString(),
          updatedAt: new Date().toISOString(),
          gender: '',
          height: 0,
          weight: 0,
          age: 0,
          scores: {
            strength: 0,
            explosivePower: 0,
            cardio: 0,
            muscleMass: 0,
            bodyFat: 0,
          },
          history: [],
          testInputs: {},
          friends: [],
          friendRequests: [],
          blockedUsers: [],
          ladderScore: 0,
          ladderRank: 0,
          ladderHistory: [],
          isGuest: false,
          lastActive: new Date().toISOString(),
        };

        await setDoc(userRef, initialUserData);
        console.log('✅ 新用戶資料已創建');
      } else {
        // 現有用戶
        await setDoc(
          userRef,
          {
            lastActive: new Date().toISOString(),
            updatedAt: new Date().toISOString(),
          },
          { merge: true }
        );
        console.log('✅ 現有用戶資料已更新');
      }
    } catch (error) {
      console.error('❌ 保存用戶資料失敗:', error);
      throw error;
    }
  }

  // 登出
  static async signOut() {
    try {
      console.log('🔄 開始 Google 登出...');
      const { signOut } = await import('firebase/auth');
      await signOut(auth);
      console.log('✅ Google 登出成功');
    } catch (error) {
      console.error('❌ Google 登出失敗:', error);
      throw error;
    }
  }

  // 檢查登入狀態
  static async checkAuthState() {
    try {
      const { onAuthStateChanged } = await import('firebase/auth');
      return new Promise(resolve => {
        const unsubscribe = onAuthStateChanged(auth, user => {
          unsubscribe();
          resolve(user ? { accessToken: user.accessToken } : null);
        });
      });
    } catch (error) {
      console.log('用戶未登入或 token 已過期');
      return null;
    }
  }
}

export default NativeGoogleAuth;
