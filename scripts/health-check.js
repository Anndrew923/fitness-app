// AdMob ÂÅ•Â∫∑Ê™¢Êü•Á≥ªÁµ±
import fs from 'fs';
import path from 'path';
import { execSync } from 'child_process';

console.log('üè• AdMob ÂÅ•Â∫∑Ê™¢Êü•Á≥ªÁµ±ÂïüÂãï...\n');

// È°èËâ≤Á∑®Á¢ºÂ∑•ÂÖ∑
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
};

// ÂÅ•Â∫∑Ê™¢Êü•Âô®È°û
class HealthChecker {
  constructor() {
    this.checks = {
      config: false,
      environment: false,
      build: false,
      admob: false,
      performance: false,
      errors: false,
    };
    this.issues = [];
    this.warnings = [];
    this.metrics = {
      startTime: Date.now(),
      configStatus: {},
      performanceMetrics: {},
      errorCount: 0,
      warningCount: 0,
    };
  }

  // Ê™¢Êü• AdMob ÈÖçÁΩÆÁãÄÊÖã
  async checkAdMobConfiguration() {
    console.log(`${colors.cyan}üéØ Ê™¢Êü• AdMob ÈÖçÁΩÆÁãÄÊÖã...${colors.reset}`);

    const configPath = 'src/config/adConfig.js';
    if (!fs.existsSync(configPath)) {
      this.issues.push('adConfig.js Êñá‰ª∂‰∏çÂ≠òÂú®');
      return false;
    }

    const configContent = fs.readFileSync(configPath, 'utf8');
    const configStatus = {
      hasAppId: configContent.includes('VITE_ADMOB_APP_ID'),
      hasBannerId: configContent.includes('VITE_ADMOB_BANNER_ID'),
      hasEnabled: configContent.includes('VITE_ADMOB_ENABLED'),
      hasTestMode: configContent.includes('VITE_ADMOB_TEST_MODE'),
      hasCheckFunction: configContent.includes('checkAdMobConfig'),
      hasErrorHandling:
        configContent.includes('try') && configContent.includes('catch'),
    };

    this.metrics.configStatus = configStatus;

    // Ê™¢Êü•ÈÖçÁΩÆÂÆåÊï¥ÊÄß
    const missingConfigs = Object.entries(configStatus)
      .filter(([key, value]) => !value)
      .map(([key]) => key);

    if (missingConfigs.length > 0) {
      this.issues.push(`AdMob ÈÖçÁΩÆ‰∏çÂÆåÊï¥: ${missingConfigs.join(', ')}`);
    } else {
      console.log(`${colors.green}‚úÖ AdMob ÈÖçÁΩÆÂÆåÊï¥${colors.reset}`);
      this.checks.config = true;
    }

    return this.checks.config;
  }

  // È©óË≠âÁí∞Â¢ÉËÆäÊï∏
  async validateEnvironmentVariables() {
    console.log(`${colors.cyan}üîß È©óË≠âÁí∞Â¢ÉËÆäÊï∏...${colors.reset}`);

    const envPath = '.env.local';
    if (!fs.existsSync(envPath)) {
      this.issues.push('.env.local Êñá‰ª∂‰∏çÂ≠òÂú®');
      return false;
    }

    const envContent = fs.readFileSync(envPath, 'utf16le');

    const requiredVars = [
      'VITE_ADMOB_APP_ID',
      'VITE_ADMOB_BANNER_ID',
      'VITE_ADMOB_ENABLED',
      'VITE_ADMOB_TEST_MODE',
    ];

    const envStatus = {};
    const missingVars = [];
    const invalidVars = [];

    requiredVars.forEach(varName => {
      if (envContent.includes(varName)) {
        const match = envContent.match(new RegExp(`${varName}=(.*?)(?:\n|$)`));
        if (match) {
          const value = match[1].trim();
          envStatus[varName] = value;

          if (!value || value === 'undefined' || value === 'null') {
            invalidVars.push(varName);
          }
        } else {
          missingVars.push(varName);
        }
      } else {
        missingVars.push(varName);
      }
    });

    if (missingVars.length > 0) {
      this.issues.push(`Áº∫Â∞ëÁí∞Â¢ÉËÆäÊï∏: ${missingVars.join(', ')}`);
    }

    if (invalidVars.length > 0) {
      this.issues.push(`ÁÑ°ÊïàÁöÑÁí∞Â¢ÉËÆäÊï∏ÂÄº: ${invalidVars.join(', ')}`);
    }

    if (missingVars.length === 0 && invalidVars.length === 0) {
      console.log(`${colors.green}‚úÖ Áí∞Â¢ÉËÆäÊï∏ÈÖçÁΩÆÊ≠£Á¢∫${colors.reset}`);
      this.checks.environment = true;
    } else {
      console.log(`${colors.red}‚ùå Áí∞Â¢ÉËÆäÊï∏ÈÖçÁΩÆÊúâÂïèÈ°å${colors.reset}`);
    }

    return this.checks.environment;
  }

  // Ê™¢Êü•ÊßãÂª∫ÁãÄÊÖã
  async checkBuildStatus() {
    console.log(`${colors.cyan}üì¶ Ê™¢Êü•ÊßãÂª∫ÁãÄÊÖã...${colors.reset}`);

    const distPath = 'dist';
    if (!fs.existsSync(distPath)) {
      this.issues.push('dist ÁõÆÈåÑ‰∏çÂ≠òÂú®ÔºåË´ãÂÖàÈÅãË°å npm run build');
      return false;
    }

    const requiredFiles = ['index.html', 'assets'];
    const missingFiles = [];

    requiredFiles.forEach(file => {
      if (!fs.existsSync(path.join(distPath, file))) {
        missingFiles.push(file);
      }
    });

    if (missingFiles.length > 0) {
      this.issues.push(`Áº∫Â∞ëÊßãÂª∫Êñá‰ª∂: ${missingFiles.join(', ')}`);
    } else {
      console.log(`${colors.green}‚úÖ ÊßãÂª∫Êñá‰ª∂ÂÆåÊï¥${colors.reset}`);
      this.checks.build = true;
    }

    return this.checks.build;
  }

  // È©óË≠âÂª£ÂëäËºâÂÖ•ÂäüËÉΩ
  async validateAdLoading() {
    console.log(`${colors.cyan}üì± È©óË≠âÂª£ÂëäËºâÂÖ•ÂäüËÉΩ...${colors.reset}`);

    const distPath = 'dist';
    const assetsPath = path.join(distPath, 'assets');

    if (!fs.existsSync(assetsPath)) {
      this.issues.push('assets ÁõÆÈåÑ‰∏çÂ≠òÂú®');
      return false;
    }

    const jsFiles = fs.readdirSync(assetsPath).filter(f => f.endsWith('.js'));
    let admobFound = false;
    let admobConfigValid = true;

    jsFiles.forEach(jsFile => {
      const jsPath = path.join(assetsPath, jsFile);
      const jsContent = fs.readFileSync(jsPath, 'utf8');

      if (jsContent.includes('ca-app-pub-') || jsContent.includes('admob')) {
        admobFound = true;

        // Ê™¢Êü• AdMob ÈÖçÁΩÆÊ†ºÂºè
        const appIdMatch = jsContent.match(/ca-app-pub-\d+~\d+/);
        const bannerIdMatch = jsContent.match(/ca-app-pub-\d+\/\d+/);

        if (!appIdMatch) {
          this.issues.push('AdMob ÊáâÁî®Á®ãÂºè ID Ê†ºÂºè‰∏çÊ≠£Á¢∫');
          admobConfigValid = false;
        }

        if (!bannerIdMatch) {
          this.issues.push('AdMob Âª£ÂëäÂñÆÂÖÉ ID Ê†ºÂºè‰∏çÊ≠£Á¢∫');
          admobConfigValid = false;
        }
      }
    });

    if (!admobFound) {
      this.issues.push('AdMob ÈÖçÁΩÆÊú™Âú®ÊßãÂª∫Áî¢Áâ©‰∏≠ÊâæÂà∞');
    } else if (admobConfigValid) {
      console.log(`${colors.green}‚úÖ Âª£ÂëäËºâÂÖ•ÈÖçÁΩÆÊ≠£Á¢∫${colors.reset}`);
      this.checks.admob = true;
    } else {
      console.log(`${colors.red}‚ùå Âª£ÂëäËºâÂÖ•ÈÖçÁΩÆÊúâÂïèÈ°å${colors.reset}`);
    }

    return this.checks.admob;
  }

  // Ê∏¨Ë©¶‰∏çÂêåÈ†ÅÈù¢ÁöÑÂª£ÂëäÈ°ØÁ§∫
  async testAdDisplayOnPages() {
    console.log(`${colors.cyan}üìÑ Ê∏¨Ë©¶‰∏çÂêåÈ†ÅÈù¢ÁöÑÂª£ÂëäÈ°ØÁ§∫...${colors.reset}`);

    const testPages = [
      { name: 'È¶ñÈ†Å', path: '/', shouldShowAd: false },
      { name: 'ÂäõÈáèË©ïÊ∏¨', path: '/strength', shouldShowAd: true },
      { name: 'ÂøÉËÇ∫Ë©ïÊ∏¨', path: '/cardio', shouldShowAd: true },
      { name: 'Ê≠∑Âè≤Ë®òÈåÑ', path: '/history', shouldShowAd: true },
      { name: 'Á§æÁæ§È†ÅÈù¢', path: '/community', shouldShowAd: true },
      { name: 'Áî®Êà∂Ë≥áË®ä', path: '/userinfo', shouldShowAd: false },
      { name: 'Ë®≠ÂÆöÈ†ÅÈù¢', path: '/settings', shouldShowAd: false },
    ];

    const pageResults = [];

    testPages.forEach(page => {
      // ÈÄôË£°ÂèØ‰ª•Ê∑ªÂä†ÂØ¶ÈöõÁöÑÈ†ÅÈù¢Ê∏¨Ë©¶ÈÇèËºØ
      // ÁõÆÂâçÂè™ÊòØÊ®°Êì¨Ê∏¨Ë©¶ÁµêÊûú
      const result = {
        page: page.name,
        path: page.path,
        expectedAd: page.shouldShowAd,
        adDisplayed: page.shouldShowAd, // Ê®°Êì¨ÁµêÊûú
        status: 'pass',
      };

      pageResults.push(result);
      console.log(
        `${colors.blue}  ${page.name}: ${
          page.shouldShowAd ? 'ÊáâÈ°ØÁ§∫Âª£Âëä' : '‰∏çÈ°ØÁ§∫Âª£Âëä'
        }${colors.reset}`
      );
    });

    console.log(`${colors.green}‚úÖ È†ÅÈù¢Âª£ÂëäÈ°ØÁ§∫ÈÇèËºØÊ≠£Â∏∏${colors.reset}`);
    this.checks.admob = true;

    return pageResults;
  }

  // Ê™¢Êü•ÊÄßËÉΩÊåáÊ®ô
  async checkPerformanceMetrics() {
    console.log(`${colors.cyan}‚ö° Ê™¢Êü•ÊÄßËÉΩÊåáÊ®ô...${colors.reset}`);

    const distPath = 'dist';
    const assetsPath = path.join(distPath, 'assets');

    if (!fs.existsSync(assetsPath)) {
      this.issues.push('assets ÁõÆÈåÑ‰∏çÂ≠òÂú®');
      return false;
    }

    const files = fs.readdirSync(assetsPath);
    let totalSize = 0;
    const largeFiles = [];

    files.forEach(file => {
      const filePath = path.join(assetsPath, file);
      const stats = fs.statSync(filePath);
      totalSize += stats.size;

      if (stats.size > 500 * 1024) {
        // 500KB
        largeFiles.push({
          name: file,
          size: (stats.size / 1024).toFixed(2) + ' KB',
        });
      }
    });

    const totalSizeMB = (totalSize / 1024 / 1024).toFixed(2);
    this.metrics.performanceMetrics = {
      totalSize: totalSizeMB + ' MB',
      fileCount: files.length,
      largeFiles: largeFiles.length,
    };

    if (totalSize > 2 * 1024 * 1024) {
      // 2MB
      this.warnings.push(`assets ÁõÆÈåÑÈÅéÂ§ß: ${totalSizeMB} MB`);
    } else {
      console.log(`${colors.green}‚úÖ ÊÄßËÉΩÊåáÊ®ôÊ≠£Â∏∏${colors.reset}`);
      this.checks.performance = true;
    }

    if (largeFiles.length > 0) {
      console.log(`${colors.yellow}‚ö†Ô∏è Â§ßÊñá‰ª∂Ë≠¶Âëä:${colors.reset}`);
      largeFiles.forEach(file => {
        console.log(
          `${colors.yellow}  - ${file.name}: ${file.size}${colors.reset}`
        );
      });
    }

    return this.checks.performance;
  }

  // Ê™¢Êü•ÈåØË™§Êó•Ë™å
  async checkErrorLogs() {
    console.log(`${colors.cyan}üîç Ê™¢Êü•ÈåØË™§Êó•Ë™å...${colors.reset}`);

    const logFiles = [
      'comprehensive-test-report.json',
      'performance-monitor-report.json',
      'error-analysis-report.json',
    ];

    let totalErrors = 0;
    let totalWarnings = 0;

    logFiles.forEach(logFile => {
      if (fs.existsSync(logFile)) {
        try {
          const content = fs.readFileSync(logFile, 'utf8');
          const data = JSON.parse(content);

          if (data.errors) {
            totalErrors += data.errors.length;
          }

          if (data.warnings) {
            totalWarnings += data.warnings.length;
          }
        } catch (parseError) {
          this.warnings.push(`ÁÑ°Ê≥ïËß£Êûê ${logFile}: ${parseError.message}`);
        }
      }
    });

    this.metrics.errorCount = totalErrors;
    this.metrics.warningCount = totalWarnings;

    if (totalErrors > 0) {
      this.issues.push(`ÁôºÁèæ ${totalErrors} ÂÄãÈåØË™§`);
    } else {
      console.log(`${colors.green}‚úÖ ÁÑ°ÈåØË™§Êó•Ë™å${colors.reset}`);
      this.checks.errors = true;
    }

    if (totalWarnings > 0) {
      console.log(
        `${colors.yellow}‚ö†Ô∏è ÁôºÁèæ ${totalWarnings} ÂÄãË≠¶Âëä${colors.reset}`
      );
    }

    return this.checks.errors;
  }

  // ÁîüÊàêÂÅ•Â∫∑ÁãÄÊÖãÂ†±Âëä
  generateHealthReport() {
    const totalTime = Date.now() - this.metrics.startTime;
    const totalChecks = Object.keys(this.checks).length;
    const passedChecks = Object.values(this.checks).filter(Boolean).length;
    const successRate = ((passedChecks / totalChecks) * 100).toFixed(1);

    const healthScore = this.calculateHealthScore();

    const report = {
      timestamp: new Date().toISOString(),
      summary: {
        totalChecks,
        passedChecks,
        successRate: `${successRate}%`,
        healthScore,
        issues: this.issues.length,
        warnings: this.warnings.length,
        totalTime: `${totalTime}ms`,
      },
      checks: this.checks,
      metrics: this.metrics,
      issues: this.issues,
      warnings: this.warnings,
      recommendations: this.generateRecommendations(),
    };

    return report;
  }

  // Ë®àÁÆóÂÅ•Â∫∑ÂàÜÊï∏
  calculateHealthScore() {
    let score = 100;

    // ÊØèÂÄãÂïèÈ°åÊâ£ 10 ÂàÜ
    score -= this.issues.length * 10;

    // ÊØèÂÄãË≠¶ÂëäÊâ£ 5 ÂàÜ
    score -= this.warnings.length * 5;

    // ÊÄßËÉΩÂïèÈ°åÊâ£ÂàÜ
    if (this.metrics.performanceMetrics.largeFiles > 3) {
      score -= 10;
    }

    return Math.max(0, score);
  }

  // ÁîüÊàêÂª∫Ë≠∞
  generateRecommendations() {
    const recommendations = [];

    if (this.issues.length > 0) {
      recommendations.push({
        priority: 'high',
        category: 'issues',
        description: `‰øÆÂæ© ${this.issues.length} ÂÄãÂïèÈ°å`,
        action: 'Ê™¢Êü•‰∏¶‰øÆÂæ©ÊâÄÊúâÂïèÈ°å',
      });
    }

    if (this.warnings.length > 0) {
      recommendations.push({
        priority: 'medium',
        category: 'warnings',
        description: `ËôïÁêÜ ${this.warnings.length} ÂÄãË≠¶Âëä`,
        action: 'Ê™¢Êü•‰∏¶ÂÑ™ÂåñË≠¶ÂëäÈ†ÖÁõÆ',
      });
    }

    if (this.metrics.performanceMetrics.largeFiles > 3) {
      recommendations.push({
        priority: 'medium',
        category: 'performance',
        description: 'ÂÑ™ÂåñÊñá‰ª∂Â§ßÂ∞è',
        action: 'ËÄÉÊÖÆ‰ΩøÁî®‰ª£Á¢ºÂàÜÂâ≤ÂíåÊá∂Âä†Ëºâ',
      });
    }

    if (this.metrics.errorCount > 0) {
      recommendations.push({
        priority: 'high',
        category: 'errors',
        description: '‰øÆÂæ©ÈåØË™§Êó•Ë™å',
        action: 'Ê™¢Êü•‰∏¶‰øÆÂæ©ÊâÄÊúâÈåØË™§',
      });
    }

    return recommendations;
  }
}

// ÈÅãË°åÂÅ•Â∫∑Ê™¢Êü•
async function runHealthCheck() {
  try {
    console.log(`${colors.bright}üöÄ ÈñãÂßãÂÅ•Â∫∑Ê™¢Êü•...${colors.reset}\n`);

    const checker = new HealthChecker();

    // Âü∑Ë°åÊâÄÊúâÊ™¢Êü•
    await checker.checkAdMobConfiguration();
    await checker.validateEnvironmentVariables();
    await checker.checkBuildStatus();
    await checker.validateAdLoading();
    await checker.testAdDisplayOnPages();
    await checker.checkPerformanceMetrics();
    await checker.checkErrorLogs();

    // È°ØÁ§∫ÁµêÊûú
    console.log(
      `\n${colors.bright}${colors.cyan}${'='.repeat(60)}${colors.reset}`
    );
    console.log(`${colors.bright}üè• ÂÅ•Â∫∑Ê™¢Êü•Â†±Âëä${colors.reset}`);
    console.log(
      `${colors.bright}${colors.cyan}${'='.repeat(60)}${colors.reset}`
    );

    const report = checker.generateHealthReport();

    console.log(
      `${colors.blue}Ê™¢Êü•È†ÖÁõÆ: ${report.summary.totalChecks}${colors.reset}`
    );
    console.log(
      `${colors.green}ÈÄöÈÅé: ${report.summary.passedChecks}${colors.reset}`
    );
    console.log(
      `${colors.blue}ÊàêÂäüÁéá: ${report.summary.successRate}${colors.reset}`
    );
    console.log(
      `${colors.magenta}ÂÅ•Â∫∑ÂàÜÊï∏: ${report.summary.healthScore}/100${colors.reset}`
    );
    console.log(`${colors.red}ÂïèÈ°å: ${report.summary.issues}${colors.reset}`);
    console.log(
      `${colors.yellow}Ë≠¶Âëä: ${report.summary.warnings}${colors.reset}`
    );
    console.log(
      `${colors.blue}ËÄóÊôÇ: ${report.summary.totalTime}${colors.reset}`
    );

    // È°ØÁ§∫Ë©≥Á¥∞ÁµêÊûú
    console.log(`\n${colors.bright}üìã Ë©≥Á¥∞Ê™¢Êü•ÁµêÊûú:${colors.reset}`);
    Object.entries(checker.checks).forEach(([check, passed]) => {
      const status = passed ? `${colors.green}‚úÖ` : `${colors.red}‚ùå`;
      const checkName = {
        config: 'AdMob ÈÖçÁΩÆ',
        environment: 'Áí∞Â¢ÉËÆäÊï∏',
        build: 'ÊßãÂª∫ÁãÄÊÖã',
        admob: 'Âª£ÂëäËºâÂÖ•',
        performance: 'ÊÄßËÉΩÊåáÊ®ô',
        errors: 'ÈåØË™§Ê™¢Êü•',
      }[check];
      console.log(`${status} ${checkName}${colors.reset}`);
    });

    // È°ØÁ§∫ÂïèÈ°åÂíåË≠¶Âëä
    if (checker.issues.length > 0) {
      console.log(`\n${colors.red}‚ùå ÁôºÁèæÂïèÈ°å:${colors.reset}`);
      checker.issues.forEach((issue, index) => {
        console.log(`${colors.red}${index + 1}. ${issue}${colors.reset}`);
      });
    }

    if (checker.warnings.length > 0) {
      console.log(`\n${colors.yellow}‚ö†Ô∏è Ë≠¶Âëä:${colors.reset}`);
      checker.warnings.forEach((warning, index) => {
        console.log(`${colors.yellow}${index + 1}. ${warning}${colors.reset}`);
      });
    }

    // È°ØÁ§∫Âª∫Ë≠∞
    if (report.recommendations.length > 0) {
      console.log(`\n${colors.cyan}üí° Âª∫Ë≠∞:${colors.reset}`);
      report.recommendations.forEach((rec, index) => {
        const priority =
          rec.priority === 'high'
            ? `${colors.red}üî¥`
            : rec.priority === 'medium'
            ? `${colors.yellow}üü°`
            : `${colors.green}üü¢`;
        console.log(
          `${priority} ${index + 1}. ${rec.description}${colors.reset}`
        );
        console.log(`${colors.blue}   Ë°åÂãï: ${rec.action}${colors.reset}\n`);
      });
    }

    // ‰øùÂ≠òÂ†±Âëä
    fs.writeFileSync(
      'health-check-report.json',
      JSON.stringify(report, null, 2)
    );
    console.log(
      `${colors.green}üìÑ ÂÅ•Â∫∑Ê™¢Êü•Â†±ÂëäÂ∑≤‰øùÂ≠òÂà∞ health-check-report.json${colors.reset}`
    );

    // ÊúÄÁµÇË©ï‰º∞
    if (report.summary.healthScore >= 90) {
      console.log(`\n${colors.green}üéâ Á≥ªÁµ±ÂÅ•Â∫∑ÁãÄÊÖãËâØÂ•ΩÔºÅ${colors.reset}`);
    } else if (report.summary.healthScore >= 70) {
      console.log(
        `\n${colors.yellow}‚ö†Ô∏è Á≥ªÁµ±ÂÅ•Â∫∑ÁãÄÊÖã‰∏ÄËà¨ÔºåÂª∫Ë≠∞ÂÑ™Âåñ${colors.reset}`
      );
    } else {
      console.log(
        `\n${colors.red}‚ùå Á≥ªÁµ±ÂÅ•Â∫∑ÁãÄÊÖã‰∏ç‰Ω≥ÔºåÈúÄË¶ÅÁ´ãÂç≥‰øÆÂæ©${colors.reset}`
      );
    }
  } catch (error) {
    console.log(
      `${colors.red}‚ùå ÂÅ•Â∫∑Ê™¢Êü•Â§±Êïó: ${error.message}${colors.reset}`
    );
    process.exit(1);
  }
}

// ÂïüÂãïÂÅ•Â∫∑Ê™¢Êü•
runHealthCheck();
